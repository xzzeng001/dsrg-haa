function [y1] = myNeuralNetworkFunction(x1)
%MYNEURALNETWORKFUNCTION neural network simulation function.
%
% Generated by Neural Network Toolbox function genFunction, 09-Feb-2023 15:15:50.
%
% [y1] = myNeuralNetworkFunction(x1) takes these arguments:
%   x = Qx1 matrix, input #1
% and returns:
%   y = Qx1 matrix, output #1
% where Q is the number of samples.

%#ok<*RPMT0>

% ===== NEURAL NETWORK CONSTANTS =====

% Input 1
x1_step1.xoffset = -1451.82425327;
x1_step1.gain = 4.00983942417594;
x1_step1.ymin = -1;

% Layer 1
b1 = [44.863599598136488567;41.890908871332570129;-39.060799273588713731;36.152418041999013099;33.238622038569225481;-30.348386216825684158;-27.458199333895173311;24.549781789064610393;21.675994069882083437;18.78709828096033263;15.896799566183812402;-13.005226505771778633;10.121000537979613298;-7.2257935604900707105;4.3164869394060438879;1.4380012489561531108;-1.3047363828016058651;-4.3417806479701299693;-7.2896508193840086065;-10.27019609623076235;-13.18117103415070801;15.900010448463849144;18.686050026252598144;21.831922977763831284;24.2880207576568381;27.482151842226571148;-30.273867689510502998;-33.221650029143788174;36.208516186291355154;39.044782439388669104;42.394274715313528645;-44.531552087478402768];
IW1_1 = [-44.736316424086503218;-44.816263348857049209;44.758537404692837924;-44.780072873137100942;-44.800074692226822037;44.800000478155482142;44.799911203888392208;-44.809698928333283163;-44.800765166264554296;-44.799999200720108661;-44.799993488833479205;44.800314258818204394;-44.798750351828694249;44.799980302428146217;-44.80160682105944403;-44.79997477807705053;-44.803520204326098053;-44.798512235747558918;-44.793132230775462688;-44.762776617574601801;-44.750246500926024851;44.79735609967855936;44.84084997265335204;44.72660056405570117;44.955352373585512282;44.781296393726073291;-44.850788808002981511;-44.810311590714832164;44.73521110098463538;44.773046916700131703;44.350694218994810569;-45.05671528171968987];

% Layer 2
b2 = -0.16510993786144931295;
LW2_1 = [-0.0015031391515662601011 -0.031009237023174911901 0.0066455471540838931266 -0.75367371997920562521 1.1111719097321166583 -0.027296664168208119305 0.53749960500080828929 0.055701067761603023643 -0.25115140780115047248 0.053252058918637712459 0.13782245409481186371 0.089070052982945152609 -0.32606780405096358333 -0.2054764013337128381 0.0092713544946839386574 -0.17174100956270096918 0.013315070254182045234 0.083974842343512171028 -0.26407924648269026635 0.28509664156731356899 -0.33376884337040391149 -0.10037114005954511642 0.12858004602475747724 -0.14517819021574890348 0.13698091806205672794 0.024276454535806173129 -0.058200652742023357977 0.045440237189111935823 -0.041396270881381244666 0.14208291143448775751 -0.25095298563445117557 -0.47343542637958441199];

% Output 1
y1_step1.ymin = -1;
y1_step1.gain = 3.62944117022367;
y1_step1.xoffset = -1451.85327202;

% ===== SIMULATION ========

% Dimensions
Q = size(x1,1); % samples

% Input 1
x1 = x1';
xp1 = mapminmax_apply(x1,x1_step1);

% Layer 1
a1 = tansig_apply(repmat(b1,1,Q) + IW1_1*xp1);

% Layer 2
a2 = repmat(b2,1,Q) + LW2_1*a1;

% Output 1
y1 = mapminmax_reverse(a2,y1_step1);
y1 = y1';
end

% ===== MODULE FUNCTIONS ========

% Map Minimum and Maximum Input Processing Function
function y = mapminmax_apply(x,settings)
y = bsxfun(@minus,x,settings.xoffset);
y = bsxfun(@times,y,settings.gain);
y = bsxfun(@plus,y,settings.ymin);
end

% Sigmoid Symmetric Transfer Function
function a = tansig_apply(n,~)
a = 2 ./ (1 + exp(-2*n)) - 1;
end

% Map Minimum and Maximum Output Reverse-Processing Function
function x = mapminmax_reverse(y,settings)
x = bsxfun(@minus,y,settings.ymin);
x = bsxfun(@rdivide,x,settings.gain);
x = bsxfun(@plus,x,settings.xoffset);
end
