function [y1] = myNeuralNetworkFunction(x1)
%MYNEURALNETWORKFUNCTION neural network simulation function.
%
% Generated by Neural Network Toolbox function genFunction, 09-Feb-2023 15:17:17.
%
% [y1] = myNeuralNetworkFunction(x1) takes these arguments:
%   x = Qx1 matrix, input #1
% and returns:
%   y = Qx1 matrix, output #1
% where Q is the number of samples.

%#ok<*RPMT0>

% ===== NEURAL NETWORK CONSTANTS =====

% Input 1
x1_step1.xoffset = -1451.85520951;
x1_step1.gain = 3.24136101118629;
x1_step1.ymin = -1;

% Layer 1
b1 = [38.784495232425364009;-35.995025007289498831;33.791467644114085545;-31.25801050117876656;-28.790592843321807237;26.276954447149226013;-23.77159208276596658;-21.239336000664021498;18.770617880198109617;16.261878694597413642;-13.884808716026203257;11.251905678487815976;-8.7579250182158041582;-6.2556364559536943304;-3.7548697896095268867;-1.2693849318653138702;-1.1925390682269163545;3.810417889987643747;6.61314601736291241;9.3605777572718249502;10.856051344471744358;-12.909058157760011198;15.736971164307366422;18.744233448806856046;21.265808434858797682;23.385828145377711706;26.297168754544081537;28.027900267702257509;-31.257538356299864546;36.49474352162409474;35.130733514594318478;43.389390508366233234];
IW1_1 = [-38.785441987488979976;39.051627118851783393;-38.77482688652840892;38.800788241818743529;38.773422046241762473;-38.782766450217224019;38.784899492921411479;38.801219972464224384;-38.783131157523563104;-38.785992891430062457;38.740539239464311549;-38.787697412770384631;38.784978394693609971;38.784986869526022701;38.784938001985025835;38.784658165795647733;-38.784605302392016313;38.781030719893266223;38.717071431746283849;38.65839042916375945;38.903111485726327601;-39.074016147724897507;39.007441773748070091;38.791751379859015003;38.785325454537634471;39.020800564413121947;38.768888467159271727;39.348485062915671051;-38.83261316632820126;39.077927209230125527;36.565038872075326992;44.894749504244458649];

% Layer 2
b2 = -0.017260535123491092813;
LW2_1 = [0.27223788724238445758 0.45385314400913323585 0.61033120994729095354 0.4183832708582241322 -0.18855772073816060019 -0.36106274641094049382 0.28146694341624084457 -0.47426648565114687406 -0.33407300040169785049 0.4083437322761033772 0.35347802236976866297 -0.52685954133145829203 -0.27592373203733899789 0.39263317070572917311 -0.55036329193277844229 0.10271753030457181355 0.061365298785295563366 0.53500103655218611554 -0.48254857262366857018 0.15816129806590101259 -0.12607432855195979671 -0.17010160281972824814 -0.034632435485702411926 0.035924344781574912844 -0.0015127110528458382992 0.06396404790099939619 -0.012111415345624203244 0.067171024740621809723 -0.03021839917048601068 1.2725908491800037581 -7.9254144551556287013 6.6390558209765604403];

% Output 1
y1_step1.ymin = -1;
y1_step1.gain = 2.91303471319259;
y1_step1.xoffset = -1451.89511923;

% ===== SIMULATION ========

% Dimensions
Q = size(x1,1); % samples

% Input 1
x1 = x1';
xp1 = mapminmax_apply(x1,x1_step1);

% Layer 1
a1 = tansig_apply(repmat(b1,1,Q) + IW1_1*xp1);

% Layer 2
a2 = repmat(b2,1,Q) + LW2_1*a1;

% Output 1
y1 = mapminmax_reverse(a2,y1_step1);
y1 = y1';
end

% ===== MODULE FUNCTIONS ========

% Map Minimum and Maximum Input Processing Function
function y = mapminmax_apply(x,settings)
y = bsxfun(@minus,x,settings.xoffset);
y = bsxfun(@times,y,settings.gain);
y = bsxfun(@plus,y,settings.ymin);
end

% Sigmoid Symmetric Transfer Function
function a = tansig_apply(n,~)
a = 2 ./ (1 + exp(-2*n)) - 1;
end

% Map Minimum and Maximum Output Reverse-Processing Function
function x = mapminmax_reverse(y,settings)
x = bsxfun(@minus,y,settings.ymin);
x = bsxfun(@rdivide,x,settings.gain);
x = bsxfun(@plus,x,settings.xoffset);
end
